{"version":3,"file":"static/js/357.c35959af.chunk.js","mappings":"yNAqCA,UAjCgB,WACZ,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAgBP,OAdAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAe,mCAAG,8GAESC,EAAAA,EAAAA,IAAkBC,OAAOL,IAFlC,cAEVM,EAFU,yBAGTP,EAAWO,EAAWC,OAAS,EAChCD,EACA,KALU,gCAOhBE,QAAQC,IAAR,MAPgB,yDAAH,qDAUrBN,GACH,GAAE,CAACH,KAGA,0BACwB,IAAnBF,EAAQS,SAAgB,qEACxBT,EAAQS,OAAS,GAAKT,EAAQY,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC9C,OACI,2BACI,oCAAYD,MACZ,uBAAIC,MAFCF,EAKhB,MAGZ,C","sources":["components/Reviews.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from './api';\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const {movieId} = useParams();\n\n    useEffect(() => {\n        const getFetchReviews = async () => {\n            try {\n                const newReviews = await fetchMovieReviews(Number(movieId));\n                return setReviews(newReviews.length > 0\n                    ? newReviews\n                    : []);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getFetchReviews();\n    }, [movieId]);\n\n    return (\n        <ul>\n            {reviews.length === 0 && <p>We don't have any reviews for this movie.</p>}\n            {reviews.length > 0 && reviews.map(({ id, author, content }) => {\n                return (\n                    <li key={id}>\n                        <p>Author: {author}</p>\n                        <p>{content}</p>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default Reviews;"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","getFetchReviews","fetchMovieReviews","Number","newReviews","length","console","log","map","id","author","content"],"sourceRoot":""}